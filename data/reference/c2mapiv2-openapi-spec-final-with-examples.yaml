openapi: 3.0.3
info:
  title: C2M API v2 - Auth Overlay
  version: 2.0.0
  description: API for submitting documents with various routing options
servers:
- url: https://api.example.com/v1
  description: Production server
- url: http://localhost:4010
  description: Mock server
components:
  schemas:
    documentName:
      type: string
    firstName:
      type: string
    lastName:
      type: string
    nickName:
      type: string
    address1:
      type: string
    address2:
      type: string
    address3:
      type: string
    city:
      type: string
    state:
      type: string
    country:
      type: string
    zip:
      type: string
    phoneNumber:
      type: string
    externalUrl:
      type: string
      format: uri
    tag:
      type: string
    tags:
      type: array
      items:
        type: string
    jobTemplate:
      type: string
    invoiceNumber:
      type: string
    routingNumber:
      type: string
    accountNumber:
      type: string
    cardNumber:
      type: string
    delimiter:
      type: string
    tbd:
      type: string
    documentId:
      type: integer
    addressId:
      type: integer
    addressListId:
      type: integer
    uploadRequestId:
      type: integer
    zipId:
      type: integer
    startPage:
      type: integer
    endPage:
      type: integer
    month:
      type: integer
      minimum: 1
      maximum: 12
    year:
      type: integer
    cvv:
      type: integer
    checkDigit:
      type: integer
    pageOffset:
      type: integer
    amountDue:
      type: number
    amount:
      type: number
    x:
      type: number
    y:
      type: number
    width:
      type: number
    height:
      type: number
    submitSingleDocWithTemplateParams:
      oneOf:
      - type: object
        properties:
          jobTemplate:
            $ref: '#/components/schemas/jobTemplate'
          paymentDetails:
            $ref: '#/components/schemas/paymentDetails'
          tags:
            $ref: '#/components/schemas/tags'
          documentSourceIdentifier:
            $ref: '#/components/schemas/documentSourceIdentifier'
        required:
        - jobTemplate
        - documentSourceIdentifier
      - type: object
        properties:
          jobTemplate:
            $ref: '#/components/schemas/jobTemplate'
          paymentDetails:
            $ref: '#/components/schemas/paymentDetails'
          tags:
            $ref: '#/components/schemas/tags'
          recipientAddressSources:
            type: array
            items:
              $ref: '#/components/schemas/recipientAddressSource'
        required:
        - jobTemplate
        - recipientAddressSources
      - type: object
        properties:
          jobTemplate:
            $ref: '#/components/schemas/jobTemplate'
          paymentDetails:
            $ref: '#/components/schemas/paymentDetails'
          tags:
            $ref: '#/components/schemas/tags'
          documentSourceIdentifier:
            $ref: '#/components/schemas/documentSourceIdentifier'
          recipientAddressSources:
            type: array
            items:
              $ref: '#/components/schemas/recipientAddressSource'
        required:
        - jobTemplate
        - documentSourceIdentifier
        - recipientAddressSources
    submitMultiDocWithTemplateParams:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              documentSourceIdentifier:
                $ref: '#/components/schemas/documentSourceIdentifier'
              recipientAddressSource:
                $ref: '#/components/schemas/recipientAddressSource'
            required:
            - documentSourceIdentifier
            - recipientAddressSource
        jobTemplate:
          $ref: '#/components/schemas/jobTemplate'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - items
      - jobTemplate
      - paymentDetails
    mergeMultiDocWithTemplateParams:
      type: object
      properties:
        documentsToMerge:
          $ref: '#/components/schemas/documentsToMerge'
        recipientAddressSource:
          $ref: '#/components/schemas/recipientAddressSource'
        jobTemplate:
          $ref: '#/components/schemas/jobTemplate'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentsToMerge
      - recipientAddressSource
      - jobTemplate
    singleDocJobParams:
      type: object
      properties:
        documentSourceIdentifier:
          $ref: '#/components/schemas/documentSourceIdentifier'
        recipientAddressSources:
          type: array
          items:
            $ref: '#/components/schemas/recipientAddressSource'
        jobOptions:
          $ref: '#/components/schemas/jobOptions'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentSourceIdentifier
      - recipientAddressSources
      - jobOptions
      - paymentDetails
    submitMultiDocParams:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              documentSourceIdentifier:
                $ref: '#/components/schemas/documentSourceIdentifier'
              recipientAddressSource:
                $ref: '#/components/schemas/recipientAddressSource'
            required:
            - documentSourceIdentifier
            - recipientAddressSource
        jobOptions:
          $ref: '#/components/schemas/jobOptions'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - items
      - jobOptions
      - paymentDetails
    mergeMultiDocParams:
      type: object
      properties:
        documentsToMerge:
          $ref: '#/components/schemas/documentsToMerge'
        recipientAddressSource:
          $ref: '#/components/schemas/recipientAddressSource'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentsToMerge
      - recipientAddressSource
      - paymentDetails
    documentsToMerge:
      type: array
      items:
        $ref: '#/components/schemas/documentSourceIdentifier'
    splitPdfParams:
      type: object
      properties:
        documentSourceIdentifier:
          $ref: '#/components/schemas/documentSourceIdentifier'
        items:
          type: array
          items:
            type: object
            properties:
              pageRange:
                $ref: '#/components/schemas/pageRange'
              recipientAddressSources:
                type: array
                items:
                  $ref: '#/components/schemas/recipientAddressSource'
            required:
            - pageRange
            - recipientAddressSources
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentSourceIdentifier
      - items
      - paymentDetails
    pageRange:
      type: object
      properties:
        startPage:
          $ref: '#/components/schemas/startPage'
        endPage:
          $ref: '#/components/schemas/endPage'
      required:
      - startPage
      - endPage
    splitPdfWithCaptureParams:
      type: object
      properties:
        documentSourceIdentifier:
          $ref: '#/components/schemas/documentSourceIdentifier'
        embeddedExtractionSpecs:
          $ref: '#/components/schemas/embeddedExtractionSpecs'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentSourceIdentifier
      - embeddedExtractionSpecs
      - paymentDetails
    embeddedExtractionSpecs:
      type: array
      items:
        $ref: '#/components/schemas/extractionSpec'
    extractionSpec:
      type: object
      properties:
        startPage:
          $ref: '#/components/schemas/startPage'
        endPage:
          $ref: '#/components/schemas/endPage'
        addressRegion:
          $ref: '#/components/schemas/addressRegion'
      required:
      - startPage
      - endPage
      - addressRegion
    addressRegion:
      type: object
      properties:
        x:
          $ref: '#/components/schemas/x'
        y:
          $ref: '#/components/schemas/y'
        width:
          $ref: '#/components/schemas/width'
        height:
          $ref: '#/components/schemas/height'
        pageOffset:
          $ref: '#/components/schemas/pageOffset'
      required:
      - x
      - y
      - width
      - height
      - pageOffset
    multiPdfWithCaptureParams:
      type: object
      properties:
        addressCapturePdfs:
          $ref: '#/components/schemas/addressCapturePdfs'
        paymentDetails:
          $ref: '#/components/schemas/paymentDetails'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - addressCapturePdfs
      - paymentDetails
    addressCapturePdfs:
      type: array
      items:
        $ref: '#/components/schemas/addressListPdf'
    addressListPdf:
      type: object
      properties:
        documentSourceIdentifier:
          $ref: '#/components/schemas/documentSourceIdentifier'
        addressListRegion:
          $ref: '#/components/schemas/addressListRegion'
        delimiter:
          $ref: '#/components/schemas/delimiter'
        tags:
          $ref: '#/components/schemas/tags'
      required:
      - documentSourceIdentifier
      - addressListRegion
    addressListRegion:
      $ref: '#/components/schemas/tbd'
    documentSourceIdentifier:
      oneOf:
      - $ref: '#/components/schemas/DocumentSourceVariant1'
      - $ref: '#/components/schemas/DocumentSourceVariant2'
      - $ref: '#/components/schemas/DocumentSourceWithUpload'
      - $ref: '#/components/schemas/DocumentSourceWithUploadAndZip'
      - $ref: '#/components/schemas/DocumentSourceFromZip'
    recipientAddressSource:
      oneOf:
      - $ref: '#/components/schemas/recipientAddress'
      - type: object
        properties:
          addressListId:
            $ref: '#/components/schemas/addressListId'
        required:
        - addressListId
      - type: object
        properties:
          addressId:
            $ref: '#/components/schemas/addressId'
        required:
        - addressId
    recipientAddress:
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/firstName'
        lastName:
          $ref: '#/components/schemas/lastName'
        address1:
          $ref: '#/components/schemas/address1'
        city:
          $ref: '#/components/schemas/city'
        state:
          $ref: '#/components/schemas/state'
        zip:
          $ref: '#/components/schemas/zip'
        country:
          $ref: '#/components/schemas/country'
        nickName:
          $ref: '#/components/schemas/nickName'
        address2:
          $ref: '#/components/schemas/address2'
        address3:
          $ref: '#/components/schemas/address3'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
      required:
      - firstName
      - lastName
      - address1
      - city
      - state
      - zip
      - country
    jobOptions:
      type: object
      properties:
        documentClass:
          $ref: '#/components/schemas/documentClass'
        layout:
          $ref: '#/components/schemas/layout'
        mailclass:
          $ref: '#/components/schemas/mailclass'
        paperType:
          $ref: '#/components/schemas/paperType'
        printOption:
          $ref: '#/components/schemas/printOption'
        envelope:
          $ref: '#/components/schemas/envelope'
      required:
      - documentClass
      - layout
      - mailclass
      - paperType
      - printOption
      - envelope
    paymentDetails:
      oneOf:
      - $ref: '#/components/schemas/creditCardPayment'
      - $ref: '#/components/schemas/invoicePayment'
      - $ref: '#/components/schemas/achPayment'
      - $ref: '#/components/schemas/userCreditPayment'
      - $ref: '#/components/schemas/applePayPayment'
      - $ref: '#/components/schemas/googlePayPayment'
    applePayPayment:
      type: object
      properties:
        applePaymentDetails:
          $ref: '#/components/schemas/applePaymentDetails'
      required:
      - applePaymentDetails
    googlePayPayment:
      type: object
      properties:
        googlePaymentDetails:
          $ref: '#/components/schemas/googlePaymentDetails'
      required:
      - googlePaymentDetails
    creditCardPayment:
      type: object
      properties:
        creditCardDetails:
          $ref: '#/components/schemas/creditCardDetails'
      required:
      - creditCardDetails
    invoicePayment:
      type: object
      properties:
        invoiceDetails:
          $ref: '#/components/schemas/invoiceDetails'
      required:
      - invoiceDetails
    achPayment:
      type: object
      properties:
        achDetails:
          $ref: '#/components/schemas/achDetails'
      required:
      - achDetails
    userCreditPayment:
      type: object
      properties:
        creditAmount:
          $ref: '#/components/schemas/creditAmount'
      required:
      - creditAmount
    creditCardDetails:
      type: object
      properties:
        cardType:
          $ref: '#/components/schemas/cardType'
        cardNumber:
          $ref: '#/components/schemas/cardNumber'
        expirationDate:
          $ref: '#/components/schemas/expirationDate'
        cvv:
          $ref: '#/components/schemas/cvv'
      required:
      - cardType
      - cardNumber
      - expirationDate
      - cvv
    invoiceDetails:
      type: object
      properties:
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        amountDue:
          $ref: '#/components/schemas/amountDue'
      required:
      - invoiceNumber
      - amountDue
    achDetails:
      type: object
      properties:
        routingNumber:
          $ref: '#/components/schemas/routingNumber'
        accountNumber:
          $ref: '#/components/schemas/accountNumber'
        checkDigit:
          $ref: '#/components/schemas/checkDigit'
      required:
      - routingNumber
      - accountNumber
      - checkDigit
    creditAmount:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
      - amount
      - currency
    applePaymentDetails:
      type: object
    googlePaymentDetails:
      type: object
    currency:
      type: string
      enum:
      - USD
      - EUR
      - GBP
      - CAD
      - AUD
    cardType:
      type: string
      enum:
      - visa
      - mastercard
      - discover
      - americanExpress
    expirationDate:
      type: object
      properties:
        month:
          $ref: '#/components/schemas/month'
        year:
          $ref: '#/components/schemas/year'
      required:
      - month
      - year
    documentFormat:
      type: string
      enum:
      - pdf
      - doc
      - docx
      - pub
      - ppt
      - pptx
      - png
      - jpeg
      - odt
    printOption:
      type: string
      enum:
      - none
      - color
      - grayscale
    envelope:
      type: string
      enum:
      - flat
      - windowedFlat
      - letter
      - legal
      - postcard
    paperType:
      type: string
      enum:
      - letter
      - legal
      - postcard
    layout:
      type: string
      enum:
      - portrait
      - landscape
    mailclass:
      type: string
      enum:
      - firstClassMail
      - priorityMail
      - largeEnvelope
    documentClass:
      type: string
      enum:
      - businessLetter
      - personalLetter
    exactlyOneNewAddress:
      $ref: '#/components/schemas/recipientAddress'
    exactlyOneListId:
      type: integer
    exactlyOneId:
      type: integer
    StandardResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        jobId:
          type: string
      example:
        status: success
        message: Job created successfully
        jobId: job_20241227_123456
    DocumentSourceWithUpload:
      type: object
      properties:
        uploadRequestId:
          $ref: '#/components/schemas/uploadRequestId'
        documentName:
          $ref: '#/components/schemas/documentName'
      required:
      - uploadRequestId
      - documentName
    DocumentSourceWithUploadAndZip:
      type: object
      properties:
        uploadRequestId:
          $ref: '#/components/schemas/uploadRequestId'
        zipId:
          $ref: '#/components/schemas/zipId'
        documentName:
          $ref: '#/components/schemas/documentName'
      required:
      - uploadRequestId
      - zipId
      - documentName
    DocumentSourceFromZip:
      type: object
      properties:
        zipId:
          $ref: '#/components/schemas/zipId'
        documentName:
          $ref: '#/components/schemas/documentName'
      required:
      - zipId
      - documentName
    DocumentSourceVariant1:
      type: object
      properties:
        documentId:
          $ref: '#/components/schemas/documentId'
      required:
      - documentId
      description: OneOf variant for documentSourceIdentifier
    DocumentSourceVariant2:
      type: object
      properties:
        externalUrl:
          $ref: '#/components/schemas/externalUrl'
      required:
      - externalUrl
      description: OneOf variant for documentSourceIdentifier
    ShortTokenRequest:
      type: object
      properties:
        long_token:
          type: string
          description: Optional if the long-term token is provided in Authorization header
        scopes:
          type: array
          items:
            type: string
          description: Optional scope narrowing; defaults to the long-term token's scopes
      additionalProperties: false
    ShortTokenResponse:
      type: object
      required:
      - token_type
      - access_token
      - expires_in
      - expires_at
      properties:
        token_type:
          type: string
          enum:
          - Bearer
        access_token:
          type: string
          description: Short-lived JWT
        expires_in:
          type: integer
          description: Lifetime in seconds (e.g., 900 for 15 minutes)
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of expiration
        scopes:
          type: array
          items:
            type: string
          description: Granted scopes
        token_id:
          type: string
          description: Server-issued identifier for this token
    LongTokenRequest:
      type: object
      description: One of several credential mechanisms must be provided.
      required:
      - grant_type
      - client_id
      properties:
        grant_type:
          type: string
          enum:
          - client_credentials
          - assertion
          description: The authentication grant type
        client_id:
          type: string
          description: Client identifier issued by Click2Mail
        client_secret:
          type: string
          description: Required if using client_credentials with secret
        otp_code:
          type: string
          description: Required if your policy mandates OTP for issuance
        assertion_type:
          type: string
          description: Required when grant_type=assertion
        assertion:
          type: string
          description: Signed JWT or other accepted assertion
        scopes:
          type: array
          items:
            type: string
          description: Scopes to assign to the long-term token
        ttl_seconds:
          type: integer
          minimum: 3600
          maximum: 7776000
          description: Requested lifetime (1 hour - 90 days). Server may clamp.
      additionalProperties: false
    LongTokenResponse:
      type: object
      required:
      - token_type
      - access_token
      - expires_in
      - expires_at
      properties:
        token_type:
          type: string
          enum:
          - Bearer
        access_token:
          type: string
          description: Long-lived token (opaque or JWT depending on deployment)
        expires_in:
          type: integer
          description: Lifetime in seconds
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of expiration
        scopes:
          type: array
          items:
            type: string
          description: Granted scopes
        token_id:
          type: string
          description: Server-issued identifier for this token
    AuthError:
      type: object
      required:
      - code
      - message
      properties:
        code:
          type: string
          example: invalid_grant
          description: OAuth-style error code
        message:
          type: string
          example: The provided client credentials are invalid.
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Content-Type:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        example: application/json
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    LongTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Long-term JWT for exchanging to short-term tokens
    ShortTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Short-term JWT for API operations
    ClientKey:
      type: apiKey
      in: header
      name: X-Client-Id
      description: Client identifier for additional security
  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            invalidGrant:
              value:
                code: invalid_grant
                message: The grant type is not supported
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            invalidToken:
              value:
                code: invalid_token
                message: The provided token is expired or invalid
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            insufficientScope:
              value:
                code: insufficient_scope
                message: The token lacks the required scope for this operation
    Error404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            notFound:
              value:
                code: not_found
                message: The requested resource was not found
    Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            rateLimited:
              value:
                code: rate_limited
                message: Too many requests. Please retry after 60 seconds.
security:
- bearerAuth: []
paths:
  /jobs/single-doc-job-template:
    post:
      summary: Operation for /jobs/single-doc-job-template
      operationId: submitSingleDocWithTemplateParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                properties:
                  jobTemplate:
                    $ref: '#/components/schemas/jobTemplate'
                  paymentDetails:
                    $ref: '#/components/schemas/paymentDetails'
                  tags:
                    $ref: '#/components/schemas/tags'
                  documentSourceIdentifier:
                    $ref: '#/components/schemas/documentSourceIdentifier'
                required:
                - jobTemplate
                - documentSourceIdentifier
              - type: object
                properties:
                  jobTemplate:
                    $ref: '#/components/schemas/jobTemplate'
                  paymentDetails:
                    $ref: '#/components/schemas/paymentDetails'
                  tags:
                    $ref: '#/components/schemas/tags'
                  recipientAddressSources:
                    type: array
                    items:
                      $ref: '#/components/schemas/recipientAddressSource'
                required:
                - jobTemplate
                - recipientAddressSources
              - type: object
                properties:
                  jobTemplate:
                    $ref: '#/components/schemas/jobTemplate'
                  paymentDetails:
                    $ref: '#/components/schemas/paymentDetails'
                  tags:
                    $ref: '#/components/schemas/tags'
                  documentSourceIdentifier:
                    $ref: '#/components/schemas/documentSourceIdentifier'
                  recipientAddressSources:
                    type: array
                    items:
                      $ref: '#/components/schemas/recipientAddressSource'
                required:
                - jobTemplate
                - documentSourceIdentifier
                - recipientAddressSources
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: single_doc_job_template job created successfully
                    jobId: single_doc_job_template_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: single_doc_job_template job queued for processing
                    jobId: single_doc_job_template_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/single-doc-job-template\" \\\n  -H \"Authorization: Bearer\
          \ <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/single-doc-job-template\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/single-doc-job-template`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request\
          \ body here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.submitSingleDocWithTemplateParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.submitSingleDocWithTemplateParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.submitSingleDocWithTemplateParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/multi-docs-job-template:
    post:
      summary: Operation for /jobs/multi-docs-job-template
      operationId: submitMultiDocWithTemplateParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      documentSourceIdentifier:
                        $ref: '#/components/schemas/documentSourceIdentifier'
                      recipientAddressSource:
                        $ref: '#/components/schemas/recipientAddressSource'
                    required:
                    - documentSourceIdentifier
                    - recipientAddressSource
                jobTemplate:
                  $ref: '#/components/schemas/jobTemplate'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - items
              - jobTemplate
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: multi_docs_job_template job created successfully
                    jobId: multi_docs_job_template_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: multi_docs_job_template job queued for processing
                    jobId: multi_docs_job_template_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/multi-docs-job-template\" \\\n  -H \"Authorization: Bearer\
          \ <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/multi-docs-job-template\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/multi-docs-job-template`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request\
          \ body here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.submitMultiDocWithTemplateParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.submitMultiDocWithTemplateParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.submitMultiDocWithTemplateParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/multi-doc-merge-job-template:
    post:
      summary: Operation for /jobs/multi-doc-merge-job-template
      operationId: mergeMultiDocWithTemplateParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentsToMerge:
                  $ref: '#/components/schemas/documentsToMerge'
                recipientAddressSource:
                  $ref: '#/components/schemas/recipientAddressSource'
                jobTemplate:
                  $ref: '#/components/schemas/jobTemplate'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - documentsToMerge
              - recipientAddressSource
              - jobTemplate
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: multi_doc_merge_job_template job created successfully
                    jobId: multi_doc_merge_job_template_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: multi_doc_merge_job_template job queued for processing
                    jobId: multi_doc_merge_job_template_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/multi-doc-merge-job-template\" \\\n  -H \"Authorization:\
          \ Bearer <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/multi-doc-merge-job-template\"\nheaders = {\n   \
          \ \"Authorization\": \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n \
          \   # Add your request body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/multi-doc-merge-job-template`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request\
          \ body here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.mergeMultiDocWithTemplateParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.mergeMultiDocWithTemplateParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.mergeMultiDocWithTemplateParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/single-doc:
    post:
      summary: Operation for /jobs/single-doc
      operationId: singleDocJobParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentSourceIdentifier:
                  $ref: '#/components/schemas/documentSourceIdentifier'
                recipientAddressSources:
                  type: array
                  items:
                    $ref: '#/components/schemas/recipientAddressSource'
                jobOptions:
                  $ref: '#/components/schemas/jobOptions'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - documentSourceIdentifier
              - recipientAddressSources
              - jobOptions
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: single_doc job created successfully
                    jobId: single_doc_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: single_doc job queued for processing
                    jobId: single_doc_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/single-doc\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/single-doc\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/single-doc`;\nconst headers = {\n    'Authorization': 'Bearer <your-jwt-token>',\n\
          \    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body here\n};\n\nconst response\
          \ = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n});\n\nconst\
          \ result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.singleDocJobParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.singleDocJobParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.singleDocJobParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/multi-doc:
    post:
      summary: Operation for /jobs/multi-doc
      operationId: submitMultiDocParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      documentSourceIdentifier:
                        $ref: '#/components/schemas/documentSourceIdentifier'
                      recipientAddressSource:
                        $ref: '#/components/schemas/recipientAddressSource'
                    required:
                    - documentSourceIdentifier
                    - recipientAddressSource
                jobOptions:
                  $ref: '#/components/schemas/jobOptions'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - items
              - jobOptions
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: multi_doc job created successfully
                    jobId: multi_doc_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: multi_doc job queued for processing
                    jobId: multi_doc_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/multi-doc\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/multi-doc\"\nheaders = {\n    \"Authorization\":\
          \ \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/multi-doc`;\nconst headers = {\n    'Authorization': 'Bearer <your-jwt-token>',\n\
          \    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body here\n};\n\nconst response\
          \ = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n});\n\nconst\
          \ result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.submitMultiDocParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.submitMultiDocParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.submitMultiDocParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/multi-doc-merge:
    post:
      summary: Operation for /jobs/multi-doc-merge
      operationId: mergeMultiDocParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentsToMerge:
                  $ref: '#/components/schemas/documentsToMerge'
                recipientAddressSource:
                  $ref: '#/components/schemas/recipientAddressSource'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - documentsToMerge
              - recipientAddressSource
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: multi_doc_merge job created successfully
                    jobId: multi_doc_merge_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: multi_doc_merge job queued for processing
                    jobId: multi_doc_merge_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/multi-doc-merge\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/multi-doc-merge\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/multi-doc-merge`;\nconst headers = {\n    'Authorization': 'Bearer\
          \ <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body\
          \ here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.mergeMultiDocParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.mergeMultiDocParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.mergeMultiDocParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/single-pdf-split:
    post:
      summary: Operation for /jobs/single-pdf-split
      operationId: splitPdfParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentSourceIdentifier:
                  $ref: '#/components/schemas/documentSourceIdentifier'
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      pageRange:
                        $ref: '#/components/schemas/pageRange'
                      recipientAddressSources:
                        type: array
                        items:
                          $ref: '#/components/schemas/recipientAddressSource'
                    required:
                    - pageRange
                    - recipientAddressSources
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - documentSourceIdentifier
              - items
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: single_pdf_split job created successfully
                    jobId: single_pdf_split_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: single_pdf_split job queued for processing
                    jobId: single_pdf_split_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/single-pdf-split\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/single-pdf-split\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/single-pdf-split`;\nconst headers = {\n    'Authorization': 'Bearer\
          \ <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body\
          \ here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.splitPdfParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.splitPdfParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.splitPdfParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/single-pdf-split-addressCapture:
    post:
      summary: Operation for /jobs/single-pdf-split-addressCapture
      operationId: splitPdfWithCaptureParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentSourceIdentifier:
                  $ref: '#/components/schemas/documentSourceIdentifier'
                embeddedExtractionSpecs:
                  $ref: '#/components/schemas/embeddedExtractionSpecs'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - documentSourceIdentifier
              - embeddedExtractionSpecs
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: single_pdf_split_addressCapture job created successfully
                    jobId: single_pdf_split_addressCapture_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: single_pdf_split_addressCapture job queued for processing
                    jobId: single_pdf_split_addressCapture_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/single-pdf-split-addressCapture\" \\\n  -H \"Authorization:\
          \ Bearer <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/single-pdf-split-addressCapture\"\nheaders = {\n\
          \    \"Authorization\": \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n\
          \    # Add your request body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/single-pdf-split-addressCapture`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request\
          \ body here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.splitPdfWithCaptureParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.splitPdfWithCaptureParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.splitPdfWithCaptureParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /jobs/multi-pdf-address-capture:
    post:
      summary: Operation for /jobs/multi-pdf-address-capture
      operationId: multiPdfWithCaptureParams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressCapturePdfs:
                  $ref: '#/components/schemas/addressCapturePdfs'
                paymentDetails:
                  $ref: '#/components/schemas/paymentDetails'
                tags:
                  $ref: '#/components/schemas/tags'
              required:
              - addressCapturePdfs
              - paymentDetails
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
                success:
                  summary: Successful job creation
                  value:
                    status: success
                    message: multi_pdf_address_capture job created successfully
                    jobId: multi_pdf_address_capture_job_123456
                queued:
                  summary: Job queued for processing
                  value:
                    status: queued
                    message: multi_pdf_address_capture job queued for processing
                    jobId: multi_pdf_address_capture_job_789012
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/jobs/multi-pdf-address-capture\" \\\n  -H \"Authorization: Bearer\
          \ <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/jobs/multi-pdf-address-capture\"\nheaders = {\n    \"\
          Authorization\": \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    #\
          \ Add your request body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/jobs/multi-pdf-address-capture`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request\
          \ body here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.multiPdfWithCaptureParams();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.multiPdfWithCaptureParams();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.multiPdfWithCaptureParams(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /auth/tokens/short:
    post:
      tags:
      - auth
      operationId: issueShortTermToken
      summary: Issue a short-term access token
      description: 'Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes).

        The long-term token must be sent in the Authorization header as `Bearer <long_token>`.

        '
      security:
      - LongTokenAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortTokenRequest'
            examples:
              withScopes:
                value:
                  scopes:
                  - jobs:submit
                  - templates:read
      responses:
        '201':
          description: Short-term token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortTokenResponse'
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    expires_in: 900
                    expires_at: '2025-08-26T22:45:00Z'
                    scopes:
                    - jobs:submit
                    - templates:read
                    token_id: tok_st_9f3d2c
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '429':
          $ref: '#/components/responses/Error429'
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/auth/tokens/short\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/auth/tokens/short\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/auth/tokens/short`;\nconst headers = {\n    'Authorization': 'Bearer\
          \ <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body\
          \ here\n};\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n\
          });\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.issueShortTermToken();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.issueShortTermToken();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.issueShortTermToken(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /auth/tokens/long:
    post:
      tags:
      - auth
      operationId: issueLongTermToken
      summary: Issue or rotate a long-term token
      description: 'Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use.

        Requires step-up authentication. Choose one of the supported grant types:


        - `client_credentials` + `client_secret`

        - `client_credentials` + one-time `otp_code`

        - `assertion` (e.g., signed JWT by your private key)

        - Or an existing short-term token with the `tokens:write` scope


        Only one mechanism is required per call.

        '
      security:
      - ShortTokenAuth:
        - tokens:write
      - ClientKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LongTokenRequest'
            examples:
              clientSecret:
                value:
                  grant_type: client_credentials
                  client_id: c2m_abc123
                  client_secret: supersecret123
                  scopes:
                  - jobs:submit
                  - templates:read
                  ttl_seconds: 7776000
              otp:
                value:
                  grant_type: client_credentials
                  client_id: c2m_abc123
                  otp_code: '123456'
                  scopes:
                  - jobs:*
                  ttl_seconds: 2592000
              assertion:
                value:
                  grant_type: assertion
                  client_id: c2m_abc123
                  assertion_type: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
                  assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
                  scopes:
                  - jobs:submit
                  - templates:read
      responses:
        '201':
          description: Long-term token issued
          headers:
            X-Token-Id:
              description: Server-generated identifier for revocation and audit
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTokenResponse'
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: lt_0d51e9bd2f6449cf...
                    expires_in: 2592000
                    expires_at: '2025-09-25T22:45:00Z'
                    scopes:
                    - jobs:*
                    token_id: tok_lt_b8e0aa
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '429':
          $ref: '#/components/responses/Error429'
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/auth/tokens/long\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\"\
          \ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/auth/tokens/long\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    # Add your request\
          \ body here\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/auth/tokens/long`;\nconst headers = {\n    'Authorization': 'Bearer <your-jwt-token>',\n\
          \    'Content-Type': 'application/json'\n};\n\nconst data = {\n    // Add your request body here\n};\n\nconst response\
          \ = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data)\n});\n\nconst\
          \ result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.issueLongTermToken();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.issueLongTermToken();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.issueLongTermToken(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
  /auth/tokens/{tokenId}/revoke:
    post:
      tags:
      - auth
      operationId: revokeToken
      summary: Revoke a token
      description: Revokes a short- or long-term token by its `tokenId`. Idempotent.
      security:
      - ShortTokenAuth:
        - tokens:revoke
      - LongTokenAuth:
        - tokens:revoke
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: string
        description: The token ID to revoke
      responses:
        '204':
          description: Revoked (idempotent)
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      x-codeSamples:
      - lang: curl
        label: cURL
        source: "curl -X POST \\\n  \"https://api.c2m.com/v2/auth/tokens/<tokenId>/revoke\" \\\n  -H \"Authorization: Bearer\
          \ <your-jwt-token>\" \\\n  -H \"Content-Type: application/json\""
      - lang: python
        label: Python
        source: "import requests\n\nurl = f\"https://api.c2m.com/v2/auth/tokens/{tokenId}/revoke\"\nheaders = {\n    \"Authorization\"\
          : \"Bearer <your-jwt-token>\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers)\n\
          print(response.json())"
      - lang: javascript
        label: JavaScript
        source: "const url = `https://api.c2m.com/v2/auth/tokens/${tokenId}/revoke`;\nconst headers = {\n    'Authorization':\
          \ 'Bearer <your-jwt-token>',\n    'Content-Type': 'application/json'\n};\n\nconst response = await fetch(url, {\n\
          \    method: 'POST',\n    headers: headers\n});\n\nconst result = await response.json();\nconsole.log(result);"
      - lang: java
        label: Java
        source: "import com.c2m.ApiClient;\nimport com.c2m.ApiException;\nimport com.c2m.Configuration;\nimport com.c2m.auth.*;\n\
          import com.c2m.api.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient\
          \ defaultClient = Configuration.getDefaultApiClient();\n        \n        // Configure Bearer token\n        HttpBearerAuth\
          \ bearer = (HttpBearerAuth) defaultClient.getAuthentication(\"bearerAuth\");\n        bearer.setBearerToken(\"<your-jwt-token>\"\
          );\n        \n        DefaultApi apiInstance = new DefaultApi(defaultClient);\n        \n        try {\n       \
          \     // Call the API\n            var result = apiInstance.revokeToken();\n            System.out.println(result);\n\
          \        } catch (ApiException e) {\n            System.err.println(\"Exception when calling API\");\n         \
          \   e.printStackTrace();\n        }\n    }\n}"
      - lang: csharp
        label: C#
        source: "using System;\nusing C2M.Api;\nusing C2M.Client;\nusing C2M.Model;\n\nnamespace Example\n{\n    public class\
          \ Program\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n\
          \            config.AccessToken = \"<your-jwt-token>\";\n            \n            var apiInstance = new DefaultApi(config);\n\
          \            \n            try\n            {\n                // Call the API\n                var result = apiInstance.revokeToken();\n\
          \                Console.WriteLine(result);\n            }\n            catch (ApiException e)\n            {\n\
          \                Console.WriteLine(\"Exception: \" + e.Message);\n                Console.WriteLine(\"Status Code:\
          \ \" + e.ErrorCode);\n            }\n        }\n    }\n}"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/c2m/go-sdk\"\n)\n\nfunc main() {\n\
          \    cfg := c2m.NewConfiguration()\n    cfg.AddDefaultHeader(\"Authorization\", \"Bearer <your-jwt-token>\")\n \
          \   \n    client := c2m.NewAPIClient(cfg)\n    ctx := context.Background()\n    \n    resp, r, err := client.DefaultApi.revokeToken(ctx).Execute()\n\
          \    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    fmt.Printf(\"\
          Response: %v\\n\", resp)\n}"
